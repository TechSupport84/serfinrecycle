# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

import React, { useEffect, useState } from "react";
import axios from "axios";
import { BiTrash } from "react-icons/bi";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { loadStripe} from "@stripe/stripe-js";
import { useSelector, useDispatch } from 'react-redux';
import {  decreaseQuantity, increaseQuantity } from '../features/CartSlices';

import { API_URL, API_URL_IMAGE } from "../constants/API_URL";
import { useAuth } from "../context/AuthContext";

const CartPage = () => {
  const [cart, setCart] = useState({ cart: [], totalAmount: 0 });
  const [orders , setOrders] = useState([]);
  const [error, setError] = useState("");
  const [shippingAddress, setShippingAddress] = useState({ street: "", city: "", state: "", country: "", zip: "" });
  const [paymentMethod, setPaymentMethod] = useState("Credit Card");
  const [loading, setLoading] = useState(false);


  const cartItems = useSelector((state) => state.cart.value);

  const dispatch = useDispatch();
  
  const { user, token } = useAuth();




  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await axios.get(`${API_URL}/orders`, {
          headers: { Authorization:`Bearer ${token}` },
        });

        setOrders(response.data.orders);
        console.log("Orders:", response.data);
      } catch (error) {
        setError(`Error occurred: ${error.message}`);
        console.error("Error fetching orders:", error);
      }
    };

    fetchOrders();


  }, [token]);

  useEffect(() => {
    if (!user || !user._id) return;

    const fetchCart = async () => {
      try {
        const response = await axios.get(`${API_URL}/carts/${user._id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCart(response.data || { cart: [], totalAmount: 0 });
      } catch (error) {
        console.error("Error fetching cart:", error);
        setError("Failed to load cart.");
        setCart({ cart: [], totalAmount: 0 });
      }
    };

    fetchCart();
  }, [user?._id, token]);

  const removeItem = async (productId) => {
    try {
      await axios.delete(`${API_URL}/carts/remove`, {
        data: { userId: user?._id, productId },
        headers: { Authorization: `Bearer ${token}` },
      });

      toast.success(" Item removed successfully! ");

      setCart((prevCart) => {
        const updatedProducts = prevCart.cart.filter((item) => item.productId._id !== productId);
        const updatedTotalAmount = updatedProducts.reduce((acc,item) => acc + item.total, 0);
        return { ...prevCart, cart: updatedProducts, totalAmount: updatedTotalAmount };
      });
    } catch (error) {
      console.error("Error removing item:", error);
      toast.error("Failed to remove item.");
    }
  };




  const handleIncreaseQuantity = (id) => {
    dispatch(increaseQuantity({ id }));
  };

  const handleDecreaseQuantity = (id) => {
    dispatch(decreaseQuantity({ id }));
  };

  console.log("Carts", cartItems)
  const calculateTotalPrice = () => {
    return cartItems
      .reduce((total, product) => total + product.price * product.quantity, 0)
      .toFixed(2); 
  };

  const totalPrice = parseFloat(calculateTotalPrice()); 

  const makePayment = async () => {
    // if (!user) {
    //   navigate(`/login?redirect=${encodeURIComponent(location.pathname)}`);
    //   return;
    // }
    
    setLoading(true);
    try {
      const stripe = await loadStripe('pk_test_51Qayd5GvGvEptgkcgbOsggAkr3Kn3xESkFI7dIEsLpzUaSDLQQEB2oDx5WcI5v24cXI7VMI4g7vosBjsCPFTl3Fz00fJWnmayL');

      const body = {
        products: cartItems
      };
      
      const headers = {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      };
  
      const response = await fetch(`${API_URL}/payment/create-checkout-session`, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(body)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Error: ${errorText}`);
      }
      
      const session = await response.json();
  
      const result = await stripe.redirectToCheckout({
        sessionId: session.id
      });
  
      if (result.error) {
        console.log(result.error.message);
        setLoading(false);
      }
    } catch (error) {
      console.error('Payment failed:', error.message);
      setLoading(false);
    }
  };
  const handleCreateOrder = async () => {
    try {
      await axios.post(
        `${API_URL}/orders/create-order`,
        {
          userId: user._id,
          cartId: cart._id,
          shippingAddress,
          paymentMethod,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      toast.success("Order Created!");

    } catch (error) {
      console.error("Error creating order:", error);
      toast.error("Failed to create order.");
    }
  };


  return (
    <div className="max-w-3xl mx-auto mt-20 p-6 shadow-lg rounded-lg bg-gray-800">
      <h2 className="text-2xl font-bold mb-6 text-gray-800">Shopping Cart</h2>
      {error && <p className="text-red-500">{error}</p>}

      {cart.cart.length > 0 ? (
        <>
          <div className="mb-6">
            <p className="text-lg font-semibold text-gray-700">
              Total Amount: <span className="text-green-600">${cart.totalAmount}</span>
            </p>

            <div className="flex items-center space-x-2">
              <button
                onClick={handleDecreaseQuantity(cart._id)}
                className="px-3 py-1 bg-gray-800 text-white rounded-md"
              >
                -
              </button>
              <span className="text-xl font-semibold text-gray-200">{cart.cart.map((item)=>(item.quantity))}</span>
              <button
                onClick={handleIncreaseQuantity(cart._id)}
                className="px-3 py-1 bg-gray-800 text-white rounded-md"
              >
                +
              </button>
            </div>
          </div>
          <ul className="space-y-4">
            {cart.cart.map((item) => (
              <li key={item._id} className="relative flex items-center gap-4 p-4 border rounded-lg">
                <div className="flex-1">
                  <img src={`${API_URL_IMAGE}/${item.imageUrl}`} className="w-24 h-24 object-cover rounded" alt={item.productId.name} />
                  <h3 className="text-lg font-semibold text-gray-400">{item.productId.name}</h3>
                  <p className="text-gray-700 font-semibold">Price: ${item.productId.price}</p>
                  <p className="text-gray-700">Quantity: {item.quantity}</p>
                  <span className="absolute right-2 top-5 flex items-center justify-center">
                    <BiTrash className="text-red-800 cursor-pointer" size={34} onClick={() => removeItem(item.productId._id)} />
                  </span>
                </div>

              
              </li>
            ))}
          </ul>
          
          <div className="mt-6">
            <h3 className="text-lg font-semibold mb-2">Shipping Address</h3>
            {['street', 'city', 'state', 'country', 'zip'].map((field) => (
              <input key={field} type="text" placeholder={field.charAt(0).toUpperCase() + field.slice(1)} value={shippingAddress[field]} onChange={(e) => setShippingAddress({ ...shippingAddress, [field]: e.target.value })} className="w-full p-2 border rounded mb-2" />
            ))}
          </div>

          <div className="mt-4">
            <h3 className="text-lg font-semibold mb-2">Payment Method</h3>
            <select value={paymentMethod} onChange={(e) => setPaymentMethod(e.target.value)} className="w-full p-2 border rounded">
              <option value="card">Credit Card</option>
              <option value="paypal">PayPal</option>
              <option value="bank_transfer">Bank Transfer</option>
              <option value="cash_on_delivery">Cash on Delivery</option>
            </select>
          </div>



            <> 


            <button className="checkout-button" onClick={makePayment}>
       
      </button>
             <button onClick={handleCreateOrder  } className="mt-6 w-full bg-blue-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition">
             ${cart.totalAmount} {user ? (loading ? 'Processing payment...' : `Pay $${totalPrice === 0 ? 0 : totalPrice.toFixed(2)}`) : "Login to Pay"}
          </button>
            </>
  
            <button onClick={makePayment } className="mt-6 w-full bg-blue-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition">
             ${cart.totalAmount} Pay Now
          </button>
          
          <ToastContainer position="top-right" autoClose={3000} />
        </>
      ) : (
        <p className="text-gray-700">Your cart is empty.</p>
      )}


    </div>
  );
};

export default CartPage;
